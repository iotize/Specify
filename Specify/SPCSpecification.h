// The MIT License
// 
// Copyright (c) 2013 Ryan Davies
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#import <Foundation/Foundation.h>
#import <Inline/Inline.h>
@class SPCBuilder;

/**
 Provides an abstract superclass for each specification in a spec suite.
 
 Each specification is a class, not an instance. Instances of this class are test cases, due to the way in which SenTestingKit works, and so are used for executing individual examples.
 
 For each subclass initialized, an instance is created and loadExamples is called.
 
 @note Examples are not added directly. This responsibility is handled by SPCBuilder, an instance of which is available for each subclass through the builder method. Invocations for each example added to the builder are generated by the SenTestCase method testInvocations.
 */
@interface SPCSpecification : INLTestCase

/** @param specification The current specification class being loaded, for later retrieval using currentSpecification. */
+ (void)setCurrentSpecification:(Class)specification;

/** @return The class for the specification currently being loaded. */
+ (Class)currentSpecification;

/** Used by subclasses for providing examples to the current specification's builder. */
- (void)loadExamples;

@end
